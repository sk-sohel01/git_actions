name: Cluster-creation
on:
  workflow_dispatch:
    inputs:
      Environment:
        description: 'Environment'
        required: true
        default: 'dev'
      ClusterName:
        description: 'Cluster Name'
        required: true
        default: 'default-cluster'
      NameSpace:
        description: 'Namespace'
        required: true
        default: 'default-namespace'
      BranchName:
        description: 'Branch Name'
        required: true
        default: 'main'
      StatefileName:
        description: 'Statefile Name'
        required: true
        default: 'statefile.tf'
      UserName:
        description: 'User Name'
        required: true
        default: 'admin'
      RepoName:
        description: 'Repo Name'
        required: true
        default: 'git_actions'
      OwnerName:
        description: 'Owner Name'
        required: true
        default: 'chandirasoodan'
      ManifestRepo:
        description: 'Manifest Repo Name'
        required: true
        default: 'cluster_manifests'






env:
  ACCESS_KEY: ${{ secrets[format('{0}_ACCESS_KEY', github.event.inputs.Environment)] }}
  SECRET_KEY: ${{ secrets[format('{0}_SECRET_KEY', github.event.inputs.Environment)] }}
  CLUSTERNAME: ${{ github.event.inputs.ClusterName }}
  NAMESPACE: ${{ github.event.inputs.NameSpace }}
  USERNAME: ${{ github.event.inputs.UserName }}
  MANIFEST_REPO: ${{ github.event.inputs.ManifestRepo }}
  AWS_REGION: us-east-1
  CLUSTER_NAME: github-eks-cluster
  NODE_TYPE: t3.medium
  NODE_COUNT: 1
  K8S_VERSION: "1.28"

jobs:
  create-eks:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/sk-sohel01/gha-agent:latest

    steps:      
      - name: Update AWS Creds
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "AWS_ACCESS_KEY_ID=${{ secrets[format('{0}_ACCESS_KEY', github.event.inputs.Environment)] }}" >> ~/.aws/credentials
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets[format('{0}_SECRET_KEY', github.event.inputs.Environment)] }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config
          echo "output = json" >> ~/.aws/config

      - name: pulling statefile from repo
        run: |
          git clone https://github.com/sk-sohel01/git_actions.git
          cd git_actions
          git config user.name "sk-sohel01"
          git config user.email "sohel.sk.01.12.94@gmail.com"   
        env:
          GITHUB_TOKEN: ${{ vars.GH_TOKEN }}

      - name: Create state file (if not exists)
        run: |
          cd git_actions
          mkdir -p ./pipeline-state
          if [ ! -f ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json ]; then
            echo '{}' > ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json
          fi
        shell: bash
      
      - name: Update pipeline-state with metadata
        run: |
          cd git_actions
          FILE="./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json"
          [ -f "$FILE" ] || echo '{}' > "$FILE"
          jq \
            '.CLUSTERNAME = "${{ github.event.inputs.ClusterName }}" | .NAMESPACE = "${{ github.event.inputs.NameSpace }}" | .USERNAME = "${{ github.event.inputs.UserName }}" | .MANIFEST_REPO ="${{ github.event.inputs.ManifestRepo }}"' \
            "$FILE" > tmp.json && mv tmp.json "$FILE"
        shell: bash
      
      - name: Check if create-eks needs to run
        id: check_create-eks
        run: |
          cd git_actions
          STAGE_STATUS=$(jq -r '.createeks // "pending"' ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json)
          echo "create-eks status: $STAGE_STATUS"
          if [[ "$STAGE_STATUS" == "failed" || "$STAGE_STATUS" == "pending" ]]; then
            echo "create-eks=true" >> $GITHUB_ENV
          fi
        shell: bash
          

      - name: Create EKS Cluster and Namespace
        if: ${{ env.create-eks == 'true' }}
        run: |
          curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
          eksctl create cluster \
          --name ${{ github.event.inputs.ClusterName }} \
          --version $K8S_VERSION \
          --region $AWS_REGION \
          --nodegroup-name standard-workers \
          --node-type $NODE_TYPE \
          --nodes $NODE_COUNT \
          --nodes-min 1 \
          --nodes-max 1 \
          --managed

      - name: Update state file for create-cluster as failed
        if: ${{ failure() }}
        run: |
          cd git_actions
          jq '.createeks = "failed"' ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json > tmp.json && mv tmp.json ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json
        shell: bash

      - name: Update state file for ekscreation (Success)
        if: ${{ success() }}
        run: |
          cd git_actions
          jq '.createeks = "success"' ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json > tmp.json && mv tmp.json ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json 
        shell: bash
      
      - name: upload json to Repo
        continue-on-error: true
        run: |
          cd git_actions
          git add .
          git commit -m "added json"
          git remote set-url origin https://x-access-token:${{ vars.GH_TOKEN }}@github.com/sk-sohel01/git_actions.git
          git push
        env:
          GITHUB_TOKEN: ${{ vars.GH_TOKEN }}
      

  flux-config:
    needs: create-eks
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/sk-sohel01/gha-agent:latest
    steps:
      - name: Update AWS Creds
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "AWS_ACCESS_KEY_ID=${{ secrets[format('{0}_ACCESS_KEY', github.event.inputs.Environment)] }}" >> ~/.aws/credentials
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets[format('{0}_SECRET_KEY', github.event.inputs.Environment)] }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config
          echo "output = json" >> ~/.aws/config

      - name: pulling state file fro repo
        run: |
          git clone https://github.com/sk-sohel01/git_actions.git
          cd git_actions
          git config user.name "sk-sohel01"
          git config user.email "sohel.sk.01.12.94@gmail.com"

      - name: Check if flux-config needs to run
        id: check_flux-config
        run: |
          cd git_actions
          STAGE_STATUS=$(jq -r '.fluxconfig // "pending"' ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json)
          echo "flux-config status: $STAGE_STATUS"
          if [[ "$STAGE_STATUS" == "failed" || "$STAGE_STATUS" == "pending" ]]; then
            echo "flux-config=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: flux-bootstarp
        id: flux-bootstarp
        run: |
          export TOKEN=${{ vars.GH_TOKEN }}
          export GITHUB_TOKEN=${{ vars.GH_TOKEN }}
          echo 'GITHUB_TOKEN=${{ vars.GH_TOKEN }}' | sudo tee -a /etc/environment
          aws eks update-kubeconfig \
            --region $AWS_REGION \
            --name ${{ github.event.inputs.ClusterName }} \
            --kubeconfig /tmp/kubeconfig
          export KUBECONFIG=/tmp/kubeconfig
          kubectl get svc
          sudo apt-get update && sudo apt-get install lsof
          lsof -i :8080 || echo "No process using port 8080"
          sudo chown $(id -u):$(id -g) /tmp/kubeconfig
          chmod 777 /tmp/kubeconfig
          flux uninstall --namespace=flux-system --keep-namespace=true --silent
          flux bootstrap github \
          --token-auth \
          --kubeconfig=/tmp/kubeconfig \
          --owner=${{ github.event.inputs.OwnerName }} \
          --repository=${{ github.event.inputs.OwnerName }}/${{ github.event.inputs.ManifestRepo }} \
          --branch=${{ github.event.inputs.BranchName }} \
          --path=clusters/staging/ \
          --personal
          flux get all

      - name: Update state file for flux-config as failure
        if: ${{ failure() }}
        run: |
          cd git_actions
          jq '.fluxconfig = "failed"' ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json > tmp.json && mv tmp.json ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json
          
        shell: bash

      - name: Update state file for flux-config as Success
        if: ${{ success() }}
        run: |
          cd git_actions
          jq '.fluxconfig = "success"' ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json > tmp.json && mv tmp.json ./pipeline-state/${{ github.event.inputs.UserName }}-pipeline-state.json
        shell: bash

      - name: upload json to Repo
        if: ${{ always() }}
        run: |
          cd git_actions
          git add .
          git commit -m "added json"
          git remote set-url origin https://x-access-token:${{ vars.GH_TOKEN }}@github.com/sk-sohel01/git_actions.git
          git push
        env:
          GITHUB_TOKEN: ${{ vars.GH_TOKEN }}

